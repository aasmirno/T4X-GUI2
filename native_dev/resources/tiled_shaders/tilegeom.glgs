#version 420 core
uniform mat4 projection;    //projection matrix

in VS_OUT {         //input block for tile ids
    uint tileId;
} gs_in[];

out vec2 texCoord;

layout (points) in;                             //define input as single vertex input (map index)
layout (triangle_strip, max_vertices = 4) out;  //define output as 4 vertices in triangle strip mode 

void main() {
    uint tileId = gs_in[0].tileId & 255u;   //bitwise &: tile id(0000 to 1000) against max ubyte (11111111)
    float tileX = float(tileId & 7u) / 8.0;   //bitwise &: tile id (0000 to 1000) against 8(1111): get x coordinate on texture
    float tileY = float((tileId >> 3u) & 7u) / 8.0; //always zero if tile types < 15: get y coordinate on texture
    
    const float B = 1 / 256.0;  //border buffer (1/256) = px border
    const float S = 1 / 8.0;    //tex size (1/8.0 = 32 px, 1/16 = 16 px)

    //set positions and texture coordinates
    gl_Position = projection * gl_in[0].gl_Position;
    texCoord = vec2(tileX + B, tileY + B);
    EmitVertex();

    gl_Position = projection * (gl_in[0].gl_Position + vec4(1.0, 0.0, 0.0, 0.0));   //bottom right
    texCoord = vec2(tileX + S - B, tileY + B);
    EmitVertex();

    gl_Position = projection * (gl_in[0].gl_Position + vec4(0.0, 1.0, 0.0, 0.0));   //top left
    texCoord = vec2(tileX + B, tileY + S - B);
    EmitVertex();

    gl_Position = projection * (gl_in[0].gl_Position + vec4(1.0, 1.0, 0.0, 0.0));   //top right
    texCoord = vec2(tileX + S - B, tileY + S - B);
    EmitVertex();

    EndPrimitive();
}  